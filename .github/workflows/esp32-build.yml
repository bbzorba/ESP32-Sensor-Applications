name: ESP32 CI Build & Flash

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  flash-local:
    runs-on: [self-hosted, windows]
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup ESP-IDF environment, build and flash
        run: |
          # Define paths as variables for clarity and easier modification
          $idfPath = "C:\Users\Xigmatek\esp\esp-idf"
          $projectDir = "button_LED" # Assuming button_LED is at the root of the checkout
          $idfPython = "C:\Users\Xigmatek\.espressif\python_env\idf4.2_py3.8_env\Scripts\python.exe"

          # Source the export script to set up the environment
          . "$idfPath\export.ps1"

          # Navigate to the project directory
          Set-Location $projectDir

          # Construct and execute the idf.py build and flash commands
          # This uses the ESP-IDF's specified Python interpreter and idf.py script
          # to ensure all dependencies are met.
          & "$idfPython" "$idfPath\tools\idf.py" build
          & "$idfPython" "$idfPath\tools\idf.py" -p COM7 flash --verbose

      - name: Verify firmware on ESP32
        run: |
          $projectDir = "button_LED"
          $idfPath = "C:\Users\Xigmatek\esp\esp-idf"
          $idfPython = "C:\Users\Xigmatek\.espressif\python_env\idf4.2_py3.8_env\Scripts\python.exe"

          # Ensure the monitor command runs in the correct environment
          Set-Location $projectDir
          
          # Using Start-Job might be problematic across different shell contexts.
          # A direct execution might be more reliable for the monitor.
          # However, if you need to capture output, Start-Job is an option.
          # If monitor itself fails, it might be an issue with the ESP-IDF installation or the project.
          
          # Attempting to run monitor directly for simplicity and better error reporting
          # If this fails, you might need to adjust how monitor is handled in CI.
          try {
              Write-Host "Starting ESP32 monitor..."
              $monitorProcess = Start-Process -FilePath $idfPython -ArgumentList "$idfPath\tools\idf.py -p COM7 monitor" -Wait -PassThru -RedirectStandardOutput "monitor_output.txt" -RedirectStandardError "monitor_error.txt"
              
              # Wait for a short period to capture initial output, then stop
              Start-Sleep -Seconds 5 
              
              # If the process is still running, attempt to stop it. This might not always work cleanly.
              if ($monitorProcess.HasExited -eq $false) {
                  Write-Host "Stopping ESP32 monitor..."
                  $monitorProcess.CloseMainWindow() # Or $monitorProcess.Kill() if necessary
                  $monitorProcess.WaitForExit(2000) # Wait a bit for it to exit
              }
              
              if ($monitorProcess.HasExited -eq $false) {
                  Write-Host "Monitor process did not exit cleanly. Attempting to kill."
                  $monitorProcess.Kill()
                  $monitorProcess.WaitForExit()
              }
              
              Write-Host "Monitor output:"
              Get-Content monitor_output.txt
              Write-Host "Monitor error output:"
              Get-Content monitor_error.txt

          } catch {
              Write-Error "An error occurred during monitor execution: $($_.Exception.Message)"
          }